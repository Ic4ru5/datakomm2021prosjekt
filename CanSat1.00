#include "UbidotsEsp32Mqtt.h"
#include <Wire.h>
#include <time.h>

//Biblotek for ICM20948
#include <stdlib.h>
#include <Adafruit_ICM20X.h>
#include <Adafruit_ICM20948.h>
#include <Adafruit_Sensor.h>
#include <cmath>

//Biblotek for BM280
#include <SPI.h>
#include <Adafruit_BME280.h>
#define SEALEVELPRESSURE_HPA (999)

#define Addr 0x76 //BME280 I2C address is 0x76
#define Addr2 0x68 //ICM20948 I2C address is 0x68
Adafruit_BME280 bme; // I2C
Adafruit_ICM20948 icm;

//Definere konstanter
const char *UBIDOTS_TOKEN = "BBFF-xnntRZDHI7xlR2aAk1DPCapV4tlbuP";  // Din Ubidots TOKEN
const char *WIFI_SSID = "AndroidAP";      // Skriv inn din Wi-Fi SSID
const char *WIFI_PASS = "melk4534";      // Skriv inn ditt Wi-Fi password
const char *DEVICE_LABEL = "Prosjekt";   // Skriv inn din enhet som data vil bli publisert til
const char *Temperatur = "Temperatur_1"; // Skriv inn ditt navn på variabel som data vil bli publisert til
const char *Fuktighet = "Fuktighet_1";  
const char *Trykk = "Trykk_1";
const char *Height = "Høyde_1";
const char *Akselerometer = "Akselerometer_1";
int PUBLISH_FREQUENCY = 5000; // Frekvens i ms på publisering til Ubidots
const int Sensor_BME_Reading_Frekvens = 100; //Hvor ofte (i ms)noden leser sensorverdier på BME280 
const int Sensor_ICM_Reading_Frekvens = 1000; //Hvor ofte (i ms) noden leser sensorverdier på ICM
const char* ntpServer = "pool.ntp.org"; // Server for timestamp
//Variabler brukt for å finne snittet av 10 målinger.
float TempSnitt[10]; //En rekke med 10 verdier med index 0 to 9
float TrykkSnitt[10];
float FuktighetSnitt[10];
float HoydeSnitt[10];
float total = 0;    //Temperatur - Sum av de siste 10 målinger
float total2 = 0;   //Trykk
float total3 = 0;   //Høyde
float total4 = 0;   //Fuktighet
float Snitt = 0;    //Temperatur - Snittet av de siste 10 målinger
float Snitt2 = 0;   //Trykk
float Snitt3 = 0;   //Høyde
float Snitt4 = 0;   //Fuktighet
float Antall_Sample = 10; //Antall prøver som bllir med i utregning
float AkselerasjonStyrke = 0;    //Lagrer akkselerasjons verdien
byte arrayIndex = 0;  //Start index for rekkene
int BegynnPublisering = 0;  //En variabel som stopper noden å publisere data før den har ti målinger
unsigned long timer;    //Variabel for publisering av data til Ubidot
unsigned long timer2;   //Frekvens for BME280
unsigned long timer3;   //Frekvens for ICM20948
unsigned long timer4;   //Frekvens for terminal publisering
unsigned long VARIABLE_TIMESTAMP; 

Ubidots ubidots(UBIDOTS_TOKEN);
  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t mag;
  sensors_event_t temp;

void callback(char *topic, byte *payload, unsigned int length)
{
  String valuePF = "00000000";
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++)
  {
    Serial.print((char)payload[i]);
    valuePF[i] = char(payload[i]);
  }
  PUBLISH_FREQUENCY = valuePF.toInt();
  //Serial.println("Value");
  //Serial.println(valuePF);
  //Serial.println("Publish Freq:");
  //Serial.println(PUBLISH_FREQUENCY);
  Serial.println();
}

//Funksjon for å få tak i timestamp til målingen
unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    //Serial.println("Failed to obtain time");
    return(0);
  }
  time(&now);
  return now;
}

void printValuesICM() {
  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t mag;
  sensors_event_t temp;
  icm.getEvent(&accel, &gyro, &temp, &mag);
  Serial.println();
  Serial.print("Accel X: ");  /* Display the results (acceleration is measured in m/s^2) */
  Serial.print(accel.acceleration.x);
  Serial.print(" \tY: ");
  Serial.print(accel.acceleration.y);
  Serial.print(" \tZ: ");
  Serial.print(accel.acceleration.z);
  Serial.println(" m/s^2 ");
  
  Serial.print("Mag X: ");
  Serial.print(mag.magnetic.x);
  Serial.print(" \tY: ");
  Serial.print(mag.magnetic.y);
  Serial.print(" \tZ: ");
  Serial.print(mag.magnetic.z);
  Serial.println(" uT");
  
  Serial.print("Gyro X: ");   /* Display the results (acceleration is measured in m/s^2) */
  Serial.print(gyro.gyro.x);
  Serial.print(" \tY: ");
  Serial.print(gyro.gyro.y);
  Serial.print(" \tZ: ");
  Serial.print(gyro.gyro.z);
  Serial.println(" radians/s ");
  
}
void printValuesBME() {    //Funksjon som skriver verdier terminalvinduet
    Serial.print("Temperature = ");
    Serial.print(bme.readTemperature());
    Serial.println(" °C");
    Serial.print("Pressure = ");
    Serial.print(bme.readPressure() / 100.0F);
    Serial.println(" hPa");
    Serial.print("Approx. Altitude = ");
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
    Serial.println(" m");
    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");
    Serial.println();
}

//BME280 funksjoner
void Snitt_Array(){   //Funksjon for utregning av snittet
  for (int i = 0; i < Antall_Sample; i++ ){
    total = total + TempSnitt[i];
    total2 = total2 + TrykkSnitt[i];
    total3 = total3 + HoydeSnitt[i];
    total4 = total4 + FuktighetSnitt[i];
  }
  Snitt = total / Antall_Sample;
  Snitt2 = total2 / Antall_Sample;
  Snitt3 = total3 / Antall_Sample;
  Snitt4 = total4 / Antall_Sample;
  total = 0;
  total2 = 0;
  total3 = 0;
  total4 = 0;
}

void UbidotPublisering() {  //Funksjon som publiserer data til Ubidots. felles for ICM20948 og BME280
    //BME280
    ubidots.add(Temperatur, Snitt); //Temperatur    Navn på fidget i Ubidots og hvilken variabel som skal bli publisert
    ubidots.add(Trykk, Snitt2);     //Fuktighet   
    ubidots.add(Height, Snitt3);    //Trykk      
    ubidots.add(Fuktighet, Snitt4); //Moh  
    //ICM
    ubidots.add(Akselerometer, AkselerasjonStyrke);
    ubidots.publish(DEVICE_LABEL);  //Ubidots som det skal publiseres til
}

void setup(void) {
  Serial.begin(115200);
  ubidots.setDebug(true);
  ubidots.connectToWifi(WIFI_SSID, WIFI_PASS);
  ubidots.setCallback(callback);
  ubidots.setup();
  ubidots.reconnect();
  timer = millis();
  timer2 = millis();
  timer3 = millis();
  timer4 = millis();
  configTime(0, 0, ntpServer); //Time Server
  bme.begin(Addr);  //BM280 på addresse 0x76
  icm.begin_I2C(Addr2); //icm på addresse 0x68
 
 
  if (!bme.begin(Addr)) {
    Serial.println("Mislyktes å finne BME280 sensor");
  }
  else {
  Serial.println("BME280 funnet!");
  }
  if (!icm.begin_I2C(Addr2)) {
    Serial.println("Mislyktes å finne ICM20948 sensor");
  }
  else {
  Serial.println("ICM20948 funnet!");
  
  // icm.setAccelRange(ICM20948_ACCEL_RANGE_16_G);
  Serial.print("Accelerometer range set to: ");
  Serial.println(icm.getAccelRange());  
  // icm.setGyroRange(ICM20948_GYRO_RANGE_2000_DPS);
  Serial.print("Gyro range set to: ");
  Serial.println(icm.getGyroRange()) ;

  //  icm.setAccelRateDivisor(4095);
  uint16_t accel_divisor = icm.getAccelRateDivisor();
  float accel_rate = 1125 / (1.0 + accel_divisor);

  Serial.print("Accelerometer data rate divisor set to: ");
  Serial.println(accel_divisor);
  Serial.print("Accelerometer data rate (Hz) is approximately: ");
  Serial.println(accel_rate);

  //  icm.setGyroRateDivisor(255);
  uint8_t gyro_divisor = icm.getGyroRateDivisor();
  float gyro_rate = 1100 / (1.0 + gyro_divisor);

  Serial.print("Gyro data rate divisor set to: ");
  Serial.println(gyro_divisor);
  Serial.print("Gyro data rate (Hz) is approximately: ");
  Serial.println(gyro_rate);

  // icm.setMagDataRate(AK09916_MAG_DATARATE_10_HZ);
  Serial.print("Magnetometer data rate set to: ");
  Serial.println(icm.getMagDataRate());
  }
}

void loop() {

  
  if (!ubidots.connected()){
    ubidots.connectToWifi(WIFI_SSID, WIFI_PASS); //Koble til wifi på nytt hvis kobling blir borte
    ubidots.reconnect();
  }
  
  //ICM
  if (millis() - timer3 > Sensor_ICM_Reading_Frekvens){
  //  /* Get a new normalized sensor event */
  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t mag;
  sensors_event_t temp;
  icm.getEvent(&accel, &gyro, &temp, &mag);
  AkselerasjonStyrke = sqrt((accel.acceleration.z)* (accel.acceleration.z) + (accel.acceleration.x)*(accel.acceleration.x) + (accel.acceleration.y)*(accel.acceleration.y));
  timer3 = millis();
  }
  //ICM slutt

  //BME280
  if (millis() - timer2 > Sensor_BME_Reading_Frekvens){   //Utløser denne if løkka hvert "Sensor_BME_Reading_Frekvens" millisekund
    float value = bme.readTemperature();                  //Temperatur
    float value2 = bme.readPressure() / 100.0F;           //Trykk
    float value3 = bme.readAltitude(SEALEVELPRESSURE_HPA);//Moh  
    float value4 = bme.readHumidity();                    //Fuktighet
                                                          //Lagring av disse verdier i rekker
    TempSnitt[arrayIndex] = value;                        //Setter temperatur i en rekke ingang 0
    TrykkSnitt[arrayIndex] = value2;                      //Setter trykk inn i en rekke
    HoydeSnitt[arrayIndex] = value3;                      //Setter høyde inn i en rekke
    FuktighetSnitt[arrayIndex] = value4;                  //Setter fuktighet i en rekke
    arrayIndex++;                                         //Indeks for hvilken posisjon i rekkene data blir publisert til.
    if (arrayIndex >= Antall_Sample) {                               //If løkke som nullstiller arrayIndex
      arrayIndex = 0;
      BegynnPublisering = 1;  
    }
                
    Snitt_Array();            //Funksjon som finner snitt av rekkene
    timer2 = millis();        //Nullstiller tiden for BCM sensor avlesning
  }
  //BME280 slutt

  if (millis() - timer4 > 1000){
  printValuesICM(); //Printe verdier i terminal for lokal kontroll
  printValuesBME(); //Printe verdier i terminal for lokal kontroll
  timer4 = millis();
  }
  
  //If løkke for publisering av data til ubidots
  if (millis() - timer > PUBLISH_FREQUENCY && BegynnPublisering == 1) {     // Utløser denne rutinene hvert "PUBLISH_FREQUENCY" millisekund
    UbidotPublisering();  //Funksjon som publiser data til Ubidot etter ønsket frekvens
    timer = millis(); //Nullstiller "timer" slik at løkka ikke utløser seg før en viss tid har gått
    ubidots.subscribeLastValue(DEVICE_LABEL, "publish_frequency");//Henter frekvens fra Ubidots
    Serial.print("Publish Frequency:");
    Serial.println(PUBLISH_FREQUENCY);
  }
  ubidots.loop();
  delay(99); //Safety delay pga testing
}
